#!/usr/bin/env ruby
# encoding : utf-8

require 'rubygems'
require "capybara"
require "capybara/dsl"
require 'capybara/poltergeist'
require 'thor'
require "redis"
require 'colorize'
require 'ruby-progressbar'
require 'highline/import'
require 'awesome_print'
require 'rest_client'
require 'cairo'

#{}%x(nohup redis-server &)

class Tw 

  Capybara.register_driver :selenium_with_long_timeout do |app|
    client = Selenium::WebDriver::Remote::Http::Default.new
    client.timeout = 120
    Capybara::Driver::Selenium.new(app, :browser => :firefox, :http_client => client, :timeout => 120)#, :js_errors => false)
  end

  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app, :browser => :firefox, :timeout => 120)#, :js_errors => false)
  end

  Capybara.app_host           = "http://www.tribalwars.com.br/"
  Capybara.run_server         = false
  Capybara.current_driver     = :poltergeist
  Capybara.javascript_driver  = :selenium_with_long_timeout

  Capybara.current_session.driver.headers = { 'Content-type' => '' }

  include Capybara::DSL

  def methods_to_reload classname 
    aux = []
    Dir[Dir.pwd.to_s+"/#{classname}*.rb"].each do |file| 
      aux.concat([File.basename(file).gsub('.rb','').gsub("#{classname}_",'')])
    end
    return aux
  end

  def initialize(options = {})

    @world   = options[:world]
    @login   = options[:login]
    @passwd  = options[:passwd]
    @connected  = false
    
    @fileAlly_name    = File.expand_path(File.dirname(__FILE__) ).to_s + "/ally#{@world}.txt"
    @fileVillage_name = File.expand_path(File.dirname(__FILE__) ).to_s + "/village#{@world}.txt"
    @filePlayer_name  = File.expand_path(File.dirname(__FILE__) ).to_s + "/player#{@world}.txt"
    @fileFilters_name = File.expand_path(File.dirname(__FILE__) ).to_s + "/filters#{@world}.txt"

    @redis_ally       = Redis.new(:host => "127.0.0.1", :db => 0)
    @redis_village    = Redis.new(:host => "127.0.0.1", :db => 1)
    @redis_player     = Redis.new(:host => "127.0.0.1", :db => 2)
    @redis_report     = Redis.new(:host => "127.0.0.1", :db => 3)
    @redis_influence  = Redis.new(:host => "127.0.0.1", :db => 4)
    @redis_myvilles   = Redis.new(:host => "127.0.0.1", :db => 5)
    @redis_filters    = Redis.new(:host => "127.0.0.1", :db => 6)
    @redis_tregion    = Redis.new(:host => "127.0.0.1", :db => 7)

    @global_conditions = {:player_info      => {},
                          :villages_info    => {},
                          :master_id        => '', 
                          :master_x         => 0, 
                          :master_y         => 0, 
                          :master_distance  => 0}
    
    methods_to_reload(self.class.name.to_s).each do |source|
      reload source
    end

    commands

  end

  def source_to_file source
    return "#{self.class.name.to_s}_#{source}.rb"
  end

  def reload source
    file = File.new(Dir.pwd.to_s+"/#{source_to_file source}")
    puts "Loading... #{source}"
    load "#{Dir.pwd.to_s}/#{source_to_file source}"
  end

  def rall
    methods_to_reload(self.class.name.to_s).each do |source|
      reload source
    end
  end

  def commands
    
    require 'prompt'
    extend Prompt::DSL

    group "Commands"
    desc "Refresh world info."
    command "refresh" do ||
      refresh_world 
    end

    desc "Login"
    command "login" do ||
      login
      Prompt.application.prompt = "Tribal > ".blue
    end

    desc "Report"
    command "report " do ||
      connected?
      report 
      puts "Reports   loaded => #{@redis_report.dbsize}."
    end

    desc "Farm"
    param :farm_conditions, "Select conditions to select villages inner influence set."
    command "farm :farm_conditions" do |conditions|
      connected?
      farm (to_hash_conditions conditions) 
    end

    desc "Farmall"
    command "farmall" do ||
      connected?
      farmall
    end

    desc "MyVilles"
    command "villes" do ||
      connected?
      refresh_my_villes 
      show_villes
    end

    desc "Reload"
    param :source , "Source method to reload.", methods_to_reload(self.class.name.to_s)
    command "reload :source" do |source|
      reload source
    end

    desc "Reload All"
    command "rall" do ||
      rall
    end

    desc "Mapa"
    command "mapa" do ||
      tw_map
    end

    desc "Region"
    param :command, "Commands to filters.", ['show','set','get', 'clean', 'reload']
    command "region :command" do |command|
      region_conditions command
    end

    desc "RSpy"
    param :region , "Region to relod spys.", ['show','set','get']
    command "rspy :region" do |region|
      spy_region region
    end

    desc "Spys"
    param :spys_conditions, "Select conditions to select villages inner influence set."
    command "spy :spys_conditions" do |conditions|
      connected?
      spys to_hash_conditions conditions
    end

    desc "Clean"
    command "clean" do 
      connected?
      clean_report
    end

    Prompt.application.prompt = "Tribal > ".red
    history_file = File.join(File.expand_path(File.dirname(__FILE__) ).to_s, ".tribal-history")    
    Prompt::Console.start history_file

  end

end

class TwExec < Thor

  desc 'man', 'login in a tribalwar.'
  method_option :login,  :type => :string, :aliases => '-l', :default => 'xykoBR'
  method_option :passwd, :type => :string, :aliases => '-p', :default => 'barbara'
  method_option :world,  :type => :string, :aliases => '-w', :default => 'br62'
  def man
    parametros = {:world => options[:world], :login => options[:login], :passwd => options[:passwd]}
    tw = Tw.new parametros
  end

  default_task :man
end

TwExec.start(ARGV)






