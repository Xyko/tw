#!/usr/bin/env ruby
# encoding : utf-8

require 'rubygems'
require "capybara"
require "capybara/dsl"
require 'capybara/poltergeist'
require 'thor'
require "redis"
require 'colorize'
require 'ruby-progressbar'
require 'highline/import'
require 'awesome_print'
require 'rest_client'

#{}%x(nohup redis-server &)

class Tw 

  Capybara.register_driver :selenium_with_long_timeout do |app|
    client = Selenium::WebDriver::Remote::Http::Default.new
    client.timeout = 120
    Capybara::Driver::Selenium.new(app, :browser => :firefox, :http_client => client, :timeout => 120, :js_errors => false)
  end

  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app, :browser => :firefox, :timeout => 120, :js_errors => false)
  end

  Capybara.app_host           = "http://www.tribalwars.com.br/"
  Capybara.run_server         = false
  Capybara.current_driver     = :poltergeist
  Capybara.javascript_driver  = :selenium_with_long_timeout

  include Capybara::DSL

  def methods_to_reload classname 
    aux = []
    Dir[Dir.pwd.to_s+"/#{classname}*.rb"].each do |file| 
      aux.concat([File.basename(file).gsub('.rb','').gsub("#{classname}_",'')])
    end
    return aux
  end

  def initialize(options = {})

    @world   = options[:world]
    @login   = options[:login]
    @passwd  = options[:passwd]
    @connected  = false
    
    @redis_ally       = Redis.new(:host => "127.0.0.1", :db => 0)
    @redis_village    = Redis.new(:host => "127.0.0.1", :db => 1)
    @redis_player     = Redis.new(:host => "127.0.0.1", :db => 2)
    @redis_report     = Redis.new(:host => "127.0.0.1", :db => 3)
    @redis_influence  = Redis.new(:host => "127.0.0.1", :db => 4)
    @redis_myvilles   = Redis.new(:host => "127.0.0.1", :db => 5)
    @redis_reload     = Redis.new(:host => "127.0.0.1", :db => 6)
    @redis_reload.flushdb

    @global_conditions = {:master_id => '14431', :master_x => 531, :master_y => 612, :master_distance => 12}
    
    methods_to_reload(self.class.name.to_s).each do |source|
      reload source
    end

    commands

    # 9 87292091
    # rogelio Solange Bia

  end

  def source_to_file source
    return "#{self.class.name.to_s}_#{source}.rb"
  end

  def reload source
    file = File.new(Dir.pwd.to_s+"/#{source_to_file source}")
    @redis_reload.hmset source , 'mtime', file.mtime
    puts "Loading... #{source}"
    load "#{Dir.pwd.to_s}/#{source_to_file source}"
  end

  def reload? source
    file = File.new(Dir.pwd.to_s+"/#{source_to_file source}")
    current_mtime   = file.mtime.to_s
    previous_mtime  = @redis_reload.hmget("#{source}",'mtime')[0].to_s
    reload source if !(current_mtime == previous_mtime)
  end


  def commands
    
    require 'prompt'
    extend Prompt::DSL

    group "Commands"
    desc "Refresh world info."
    command "refresh" do ||
      refresh_world 
    end

    desc "Login"
    command "login" do ||
      login
      Prompt.application.prompt = "Tribal > ".blue
    end

    desc "Login map"
    command "login_map" do ||
      login_map
      Prompt.application.prompt = "TribalMap > ".blue
    end

    desc "Player"
    param :player, "Show player info", @redis_player.keys('*')
    command "player :player" do |player|
      show_player player
    end

    desc "Ally"
    param :ally, "Show ally info", @redis_player.keys('*')
    command "ally :ally" do |ally|
      puts @redis_ally.get("#{ally}")
    end

    desc "Village"
    param :village, "Show village info", @redis_player.keys('*')
    command "village :village" do |village|
      puts @redis_village.get("#{village}")
    end

    desc "Influence"
    param :influence_conditions, "Select conditions to select villages inner influence window from master_village."
    command "influence :influence_conditions" do |conditions|
      @redis_influence.flushdb
      influence (to_hash_conditions conditions)
      puts "Influence loaded => #{@redis_influence.dbsize}."
    end

    desc "Report"
    command "report " do ||
      connected?
      @redis_report.flushdb
      report #(to_hash_conditions conditions)
      puts "Reports   loaded => #{@redis_report.dbsize}."
    end

    desc "Spys"
    param :spys_conditions, "Select conditions to select villages inner influence set."
    command "spy :spys_conditions" do |conditions|
      connected?
      spys (to_hash_conditions conditions)
    end

    desc "Farm"
    param :farm_conditions, "Select conditions to select villages inner influence set."
    command "farm :farm_conditions" do |conditions|
      connected?
      reload? "farm"
      farm (to_hash_conditions conditions) 
    end

    desc "Conditions"
    param :master, "Set conditions."
    command "conditions" do |master|
      show_conditions (to_hash_conditions conditions)
    end

    desc "Notes"
    command "notes" do ||
      show_notes
    end

    desc "MyVilles"
    command "villes" do ||
      connected?
      refresh_my_villes
    end

    desc "Reload"
    param :source , "Source method to reload.", methods_to_reload(self.class.name.to_s)
    command "reload :source" do |source|
      reload source
    end

    Prompt.application.prompt = "Tribal > ".red
    history_file = File.join(File.expand_path(File.dirname(__FILE__) ).to_s, ".tribal-history")    
    Prompt::Console.start history_file

  end

end

class TwExec < Thor

  desc 'man', 'login in a tribalwar.'
  method_option :login,  :type => :string, :aliases => '-l', :default => 'xykobr'
  method_option :passwd, :type => :string, :aliases => '-p', :default => 'barbara'
  method_option :world,  :type => :string, :aliases => '-w', :default => 'br62'
  def man
    parametros = {:world => options[:world], :login => options[:login], :passwd => options[:passwd]}
    tw = Tw.new parametros
  end

  default_task :man
end

TwExec.start(ARGV)


